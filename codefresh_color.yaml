version: "1.0"
stages:
  - clone
  - build
  - metadata
  - dev
  - qa
  - staging
  - europe
  - asia
  - us

hooks:
  on_fail:
    steps:
      exec:
        type: slack-post-channel:0.0.7
        arguments:
          SLACK_TOKEN: ${{LR_SLACK_TOKEN}}
          SLACK_CHANNEL: ${{SLACK_CHANNEL}}
          SLACK_MESSAGE: "CICD build for color failed. See ${{CF_BUILD_URL}}"
        when:
          condition:
            all:
              alert: "'${{SLACK_ALERT}}' == 'true'"

steps:
  clone:
    title: "Cloning repository"
    stage: clone
    type: "git-clone"
    depth: 1
    exclude_blobs: true
    repo: "${{CF_REPO_OWNER}}/${{CF_REPO_NAME}}"
    revision: "${{CF_BRANCH}}"
    git: "github"

  pickupColor:
    title: "extract color from commit message"
    stage: clone
    image: ubuntu
    commands:
      - |
        export COLOR=$(echo "${CF_COMMIT_MESSAGE}" | awk -F":" '{print $1}')
        cf_export COLOR=$COLOR

  build:
    title: "Building Docker image"
    type: "build"
    image_name: "aperturesci/rollouts-demo"
    working_directory: "${{clone}}"
    tag: "${{CF_SHORT_REVISION}}"
    dockerfile: "Dockerfile"
    registry: dockerhub
    stage: "build"
    build_arguments:
      - COLOR=${{COLOR}}
      - LATENCY=0
      - ERROR_RATE=0
    metadata:
      set:
        - color: ${{COLOR}}
    on_success:
      annotations:
        set:
          - annotations:
              - sha: ${{CF_SHORT_REVISION}}
              - color: ${{COLOR}}
            display: color

  metadata_tasks:
    description: "Tasks to get credentials for signing images"
    type: parallel
    stage: "metadata"
    when:
      condition:
        all:
          alert: "'${{QUICK_EXECUTION}}' == 'false'"
    steps:
      prepcosign:
        title: Fetch Cosign and Docker Keys
        image: ubuntu
        stage: metadata
        commands:
          - mkdir -p ${{CF_VOLUME_PATH}}/.docker
          - echo ${{DOCKERCONFIG}} | base64 -d > ${{CF_VOLUME_PATH}}/.docker/config.json

      obtain_id_token:
        stage: "metadata"
        title: Obtain ID Token
        type: obtain-oidc-id-token:1.2.3
        arguments:
          AUDIENCE: 'sigstore'

  reporting:
    title: Reporting
    type: parallel
    stage: "metadata"
    fail_fast: false
    when:
      condition:
        all:
          alert: "'${{QUICK_EXECUTION}}' == 'false'"
    steps:
      enrich-image:
        stage: build
        title: Report image to Codefresh CD
        type: codefresh-report-image:1.0.10
        working_directory: /code
        fail_fast: false
        arguments:
          CF_API_KEY: ${{CF_API_KEY}}
          CF_IMAGE: "docker.io/aperturesci/rollouts-demo:${{CF_SHORT_REVISION}}"
          CF_RUNTIME_NAME: demo
          CF_CONTAINER_REGISTRY_INTEGRATION: docker-intg
          CF_GITHUB_TOKEN: "${{GITHUB_TOKEN}}"
          CF_GIT_PROVIDER: github
          CF_GIT_REPO: "${{CF_REPO_OWNER}}/${{CF_REPO_NAME}}"
          CF_GIT_BRANCH: "master"
          CF_GIT_REVISION: "${{CF_REVISION}}"
          CF_JIRA_INTEGRATION: jira-intg
          CF_JIRA_MESSAGE: "${{CF_COMMIT_MESSAGE_ESCAPED}}"
          CF_JIRA_PROJECT_PREFIX: AP
                # when:
                #   condition:
                #     all:
                #       alert: "'${{SLACK_ALERT}}' == 'true'"

      # cosign:
      #   title: Cosign Image
      #   image: bitnami/cosign:2
      #   stage: metadata
      #   fail_fast: false
      #   commands:
      #     - cp -r ${{CF_VOLUME_PATH}}/.docker /
      #     - cosign sign --key ${{CF_VOLUME_PATH}}/cosign.key aperturesci/rollouts-demo:${{CF_SHORT_REVISION}} -a CICD=Codefresh --yes
      #     - rm ${{CF_VOLUME_PATH}}/cosign.key

      cosign:
        title: Keyless Image cosign
        image: bitnami/cosign:2
        fail_fast: false
        commands:
          - |
            export SIGSTORE_ID_TOKEN=$ID_TOKEN
            cp -r ${{CF_VOLUME_PATH}}/.docker /
            cosign sign --oidc-issuer "https://oidc.codefresh.io" --yes=true aperturesci/rollouts-demo:${{CF_SHORT_REVISION}} -a CICD=Codefresh --yes
            rm -rf ${{CF_VOLUME_PATH}}/.docker

      JiraCommentCreate:
        title: "Add Jira Comment"
        type: jira-issue-manager:1.0.11
        fail_fast: false
        arguments:
          JIRA_API_KEY: ${{JIRA_API_KEY}}
          JIRA_BASE_URL: ${{JIRA_URL}}
          JIRA_USERNAME: ${{JIRA_USER}}
          JIRA_ISSUE_SOURCE_FIELD: "AP-103"
          ACTION: "comment_create"
          COMMENT_BODY: "Color update to ${{COLOR}} in Codefresh build [${{CF_BUILD_ID}}|${{CF_BUILD_URL}}] finished in Codefresh."

  clone_dev:
    title: "Cloning repository for DEV"
    type: "git-clone"
    git: "github-lr"
    repo: aperture-sci/DevOps
    revision: "main"
    depth: 1
    exclude_blobs: true
    stage: dev

  create_dev_branch:
    title: "Create temp branch"
    image: maniator/gh
    working_directory: "/codefresh/volume/DevOps"
    stage: dev
    commands:
      - |
        export BRANCH="dev-temp-$(date +%s)"
        cf_export TEMP_BRANCH=$BRANCH
        git checkout -b $BRANCH
    when:
      condition:
        all:
          merge: "'${{MERGE}}' == 'true'"
  update_dev_manifest:
    description: update the image version for Dev
    image: codefresh/cli
    working_directory: "/codefresh/volume/DevOps"
    stage: dev
    commands:
      - yq -i -y '.images[0].newTag="${{CF_SHORT_REVISION}}"' manifests/color/dev/kustomization.yaml

  create_dev_pr:
    title: "Create Dev PR"
    image: lrochette/ghssh:0.0.4
    working_directory: "/codefresh/volume/DevOps"
    stage: dev
    commands:
      - |
        mkdir -p ~/.ssh
        echo "${SSH_KEY}" | tr ',' '\n' > ~/.ssh/id_ed25519
        chmod 0600 ~/.ssh/id_ed25519
        chmod 0700 ~/.ssh
        ssh-keygen -R github.com 2>/dev/null
        ssh-keyscan -H github.com >> ~/.ssh/known_hosts 2> >(grep -v '^#' >&2)
        ls -ail ~/.ssh
      - |
        git config --global user.email "laurent.rochette@octopus.com"
        git config --global user.name "Laurent Rochette"
        git add manifests/color/dev/kustomization.yaml
        git commit -m "Update image to deploy to ${COLOR} (${CF_SHORT_REVISION})"
        git push -u origin "$TEMP_BRANCH"
      - gh pr create -B main -H "$TEMP_BRANCH" \
          -t "Automated PR to push Dev tag ${CF_SHORT_REVISION}" \
          -b "This PR updates the content of the file as part of an automated workflow."
      - gh pr merge "$TEMP_BRANCH" --merge --delete-branch
    when:
      condition:
        all:
          merge: "'${{MERGE}}' == 'true'"

  commit_and_push_dev:
    title: Commit Dev changes and push
    type: git-commit:0.1.4
    stage: dev
    arguments:
      repo: aperture-sci/DevOps
      git: github-lr
      working_directory: "/codefresh/volume/DevOps"
      commit_message: "Update image to deploy to ${{COLOR}} (${{CF_SHORT_REVISION}})"
      git_user_name: lrochette
      git_user_email: laurent.rochette@codefresh.io
      allow_empty: true
      force_push: false
      rebase: true
      base_branch: main
      use_ssh: true
      add:
        - manifests/color/dev/kustomization.yaml
    when:
      condition:
        all:
          merge: "'${{MERGE}}' == 'false'"
  # retry_push_dev:
  #   description: Retry push if it failed
  #   image: alpine:3.6
  #   working_directory: /codefresh/volume/DevOps
  #   environment:
  #     GIT_INTEGRATION_NAME=github
  #   commands:
  #     - |
  #       export GIT_ACCESS_TOKEN=$(codefresh get context $GIT_INTEGRATION_NAME --decrypt --prepare -o yaml | yq -r -c .spec.data.auth.password)
  #       # echo GIT_ACCESS_TOKEN=$GIT_ACCESS_TOKEN >> /meta/env_vars_to_export
  #       export GIT_ACCESS_TOKEN_USER=$(codefresh get context $GIT_INTEGRATION_NAME --decrypt --prepare -o yaml | yq -r -c .spec.data.auth.username)
  #       export PRIVATE_KEY=$(codefresh get context $GIT_INTEGRATION_NAME --decrypt --prepare -o yaml | yq .spec.data.auth.sshPrivateKey)
  #       # echo PRIVATE_KEY=$PRIVATE_KEY >> /meta/env_vars_to_export
  #       git config --global user.name "lrochette"
  #       git config --global user.email "laurent.rochette@codefresh.io"
  #       git pull
  #       git add manifests/color/dev/kustomization.yaml
  #       git commit --allow-empty -m "Update image to deploy to ${{COLOR}} (${{CF_SHORT_REVISION}})"
  #       git push


  #
  # DEV
  #
  approve_dev:
    stage: dev
    type: pending-approval
    timeout:
      timeUnit: minutes
      duration: 3
      finalState: approved

  sync_dev:
    type: gitops-argocd-sync:1.5.0
    title: Sync ArgoCD app in DEV and wait
    stage: dev
    arguments:
      RUNTIME: demo
      APPLICATION: color-dev

  #
  # QA
  #
  approve_qa:
    stage: qa
    type: pending-approval
    timeout:
      timeUnit: minutes
      duration: 5
      finalState: approved

  clone_qa:
    title: "Cloning repository for QA"
    type: "git-clone"
    git: "github"
    repo: aperture-sci/DevOps
    revision: "main"
    depth: 1
    exclude_blobs: true
    stage: qa

  update_qa_manifest:
    description: update the image version for qa
    image: codefresh/cli
    working_directory: "/codefresh/volume/DevOps"
    stage: qa
    commands:
      - yq -i -y '.images[0].newTag="${{CF_SHORT_REVISION}}"' manifests/color/qa/kustomization.yaml

  commit_and_push_qa:
    title: Commit changes and push
    type: git-commit:0.1.4
    stage: qa
    arguments:
      repo: aperture-sci/DevOps
      git: github-lr
      working_directory: "/codefresh/volume/DevOps"
      commit_message: "Update image to deploy to ${{COLOR}} (${{CF_SHORT_REVISION}})"
      git_user_name: lrochette
      git_user_email: laurent.rochette@codefresh.io
      allow_empty: true
      force_push: false
      use_ssh: true
      add:
        - manifests/color/qa/kustomization.yaml

  sync_qa:
    type: gitops-argocd-sync:1.5.0
    title: Sync ArgoCD app in QA and  wait
    stage: qa
    arguments:
      RUNTIME: demo
      APPLICATION: color-qa

  #
  # STAGING
  #
  approve_staging:
    stage: staging
    type: pending-approval
    timeout:
      timeUnit: minutes
      duration: 5
      finalState: approved

  clone_staging:
    title: "Cloning repository for staging"
    type: "git-clone"
    git: "github"
    repo: aperture-sci/DevOps
    revision: "main"
    depth: 1
    exclude_blobs: true
    stage: staging

  update_staging_manifest:
    description: update the image version for staging
    image: codefresh/cli
    working_directory: "/codefresh/volume/DevOps"
    stage: staging
    commands:
      - yq -i -y '.images[0].newTag="${{CF_SHORT_REVISION}}"' manifests/color/staging/kustomization.yaml

  commit_and_push_staging:
    title: Commit changes and push
    type: git-commit:0.1.4
    stage: staging
    arguments:
      repo: aperture-sci/DevOps
      git: github-lr
      working_directory: "/codefresh/volume/DevOps"
      commit_message: "Update image to deploy to ${{COLOR}} (${{CF_SHORT_REVISION}})"
      git_user_name: lrochette
      git_user_email: laurent.rochette@codefresh.io
      allow_empty: true
      force_push: false
      use_ssh: true
      add:
        - manifests/color/staging/kustomization.yaml

  sync_staging:
    title: Sync ArgoCD app in staging and  wait
    type: gitops-argocd-sync:1.5.0
    stage: staging
    arguments:
      RUNTIME: demo
      APPLICATION: color-staging

  #
  # Europe
  #
  approve-eu:
    stage: europe
    type: pending-approval
    timeout:
      timeUnit: minutes
      duration: 5
      finalState: approved

  clone-eu:
    title: "Cloning repository for Europe"
    type: "git-clone"
    git: "github"
    repo: aperture-sci/DevOps
    revision: "main"
    depth: 1
    exclude_blobs: true
    stage: europe

  update_europe_manifest:
    description: update the image version for Europe
    image: codefresh/cli
    working_directory: "/codefresh/volume/DevOps"
    stage: europe
    commands:
      - yq -i -y '.images[0].newTag="${{CF_SHORT_REVISION}}"' manifests/color/eu/kustomization.yaml

  commit_and_push_eu:
    title: Commit changes and push to Europe
    type: git-commit:0.1.4
    stage: europe
    arguments:
      repo: aperture-sci/DevOps
      git: github-lr
      working_directory: "/codefresh/volume/DevOps"
      commit_message: "Update image to deploy to ${{COLOR}} (${{CF_SHORT_REVISION}})"
      git_user_name: lrochette
      git_user_email: laurent.rochette@codefresh.io
      allow_empty: true
      force_push: false
      use_ssh: true
      add:
        - manifests/color/eu/kustomization.yaml

  sync_eu:
    title: Sync ArgoCD app in Europe and wait
    type: gitops-argocd-sync:1.5.0
    stage: europe
    arguments:
      RUNTIME: high
      APPLICATION: color-eu

  #
  # Asia
  #
  approve_asia:
    stage: asia
    type: pending-approval
    timeout:
      timeUnit: minutes
      duration: 5
      finalState: approved

  clone_asia:
    title: "Cloning repository for Asia"
    type: "git-clone"
    git: "github"
    repo: aperture-sci/DevOps
    revision: "main"
    depth: 1
    exclude_blobs: true
    stage: asia

  update_asia_manifest:
    description: update the image version for Asia
    image: codefresh/cli
    working_directory: "/codefresh/volume/DevOps"
    stage: asia
    commands:
      - yq -i -y '.images[0].newTag="${{CF_SHORT_REVISION}}"' manifests/color/asia/kustomization.yaml

  commit_and_push_asia:
    title: Commit changes and push
    type: git-commit:0.1.4
    stage: asia
    arguments:
      repo: aperture-sci/DevOps
      git: github-lr
      working_directory: "/codefresh/volume/DevOps"
      commit_message: "Update image to deploy to ${{COLOR}} (${{CF_SHORT_REVISION}})"
      git_user_name: lrochette
      git_user_email: laurent.rochette@codefresh.io
      allow_empty: true
      force_push: false
      use_ssh: true
      add:
        - manifests/color/asia/kustomization.yaml

  sync_asia:
    title: Sync ArgoCD app in Asia and wait
    type: gitops-argocd-sync:1.5.0
    stage: asia
    arguments:
      RUNTIME: high
      APPLICATION: color-asia

  #
  # Prod US West and East
  #
  approve_us:
    stage: us
    type: pending-approval
    timeout:
      timeUnit: minutes
      duration: 5
      finalState: approved

  clone_us:
    title: "Cloning repository for US"
    type: "git-clone"
    git: "github"
    repo: aperture-sci/DevOps
    revision: "main"
    depth: 1
    exclude_blobs: true
    stage: us

  update_us_manifest:
    description: update the image version for US East and West
    image: codefresh/cli
    working_directory: "/codefresh/volume/DevOps"
    stage: us
    commands:
      - yq -i -y '.images[0].newTag="${{CF_SHORT_REVISION}}"' manifests/color/east/kustomization.yaml
      - yq -i -y '.images[0].newTag="${{CF_SHORT_REVISION}}"' manifests/color/west/kustomization.yaml

  commit_and_push_us:
    title: Commit changes and push for US
    type: git-commit:0.1.4
    stage: us
    arguments:
      repo: aperture-sci/DevOps
      git: github-lr
      working_directory: "/codefresh/volume/DevOps"
      commit_message: "Update image to deploy to ${{COLOR}} (${{CF_SHORT_REVISION}})"
      git_user_name: lrochette
      git_user_email: laurent.rochette@codefresh.io
      allow_empty: true
      force_push: false
      use_ssh: true
      add:
        - manifests/color/east/kustomization.yaml
        - manifests/color/west/kustomization.yaml

  sync_us:
    type: parallel
    stage: us
    steps:
      sync_east:
        title: Sync ArgoCD app in US East and wait
        type: gitops-argocd-sync:1.5.0
        arguments:
          RUNTIME: high
          APPLICATION: color-east

      sync_west:
        title: Sync ArgoCD app in US West and wait
        type: gitops-argocd-sync:1.5.0
        arguments:
          RUNTIME: high
          APPLICATION: color-west
